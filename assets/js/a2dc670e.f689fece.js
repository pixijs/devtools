"use strict";(self.webpackChunk_devtool_docs=self.webpackChunk_devtool_docs||[]).push([[493],{6126:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(1085),a=t(1184);const r={title:"Tree"},i="Tree Extension",s={id:"plugin/tree",title:"Tree",description:"The Tree extension allows you to filter and display the scene graph in a tree view. This extension is useful for navigating complex scenes and debugging issues related to the structure of your PixiJS application.",source:"@site/docs/plugin/tree.md",sourceDirName:"plugin",slug:"/plugin/tree",permalink:"/devtools/docs/plugin/tree",draft:!1,unlisted:!1,editUrl:"https://github.com/pixijs/devtools/tree/main/packages/docs/docs/plugin/tree.md",tags:[],version:"current",frontMatter:{title:"Tree"},sidebar:"plugin",previous:{title:"Stats",permalink:"/devtools/docs/plugin/stats"}},d={},c=[{value:"Example",id:"example",level:4}];function l(e){const n={code:"code",h1:"h1",h4:"h4",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"tree-extension",children:"Tree Extension"}),"\n",(0,o.jsx)(n.p,{children:"The Tree extension allows you to filter and display the scene graph in a tree view. This extension is useful for navigating complex scenes and debugging issues related to the structure of your PixiJS application."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface TreeExtension {\n  /**\n   * The metadata for the extension.\n   */\n  extension: ExtensionMetadata;\n  /**\n   * Allows you to update the metadata for a node.\n   * Including the name and buttons to be displayed in the tree.\n   * @param node The current node.\n   * @param metadata The current metadata for the node.\n   */\n  updateNodeMetadata?(node: Container, metadata: PixiMetadata): PixiMetadata;\n\n  /**\n   * Called when a button is pressed on a node.\n   * @param container The current node.\n   * @param name The name of the button.\n   * @param pressed Whether the button is pressed or not. Only used for toggle buttons.\n   */\n  onButtonPress?: (container: Container, name: string, pressed?: boolean) => void;\n\n  /**\n   * Called when a context menu button is selected.\n   * @param container The current node.\n   * @param contextMenuName The name of the context menu button.\n   */\n  onContextButtonPress?: (container: Container, contextMenuName: string) => void;\n  /**\n   * Called when a node is renamed.\n   * @param container The current node.\n   * @param newName The new name of the node.\n   */\n  onRename?: (container: Container, newName: string) => void;\n  /**\n   * Called when a node is deleted.\n   * @param container The current node.\n   */\n  onDeleted?: (container: Container) => void;\n  /**\n   * Called when a node is swapped.\n   * @param container The current node.\n   * @param newIndex The new index of the node.\n   */\n  onSwap?: (container: Container, newIndex: number) => void;\n  /**\n   * Called when a node is selected.\n   * @param container The current node.\n   */\n  onSelected?: (container: Container) => void;\n  /**\n   * The buttons to display in the tree panel.\n   */\n  panelButtons?: ButtonMetadata[];\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { Container } from 'pixi.js';\nimport type { ExtensionMetadata } from '@pixi-spine/devtools';\n\nexport const tree: TreeExtension = {\n  extension: {\n    type: 'tree',\n    name: 'custom-tree',\n  },\n  updateNodeMetadata(node: Container, metadata) {\n    if (node.name === 'custom') {\n      metadata.buttons.push({\n        name: 'lock',\n        icon: 'lock',\n      });\n    }\n    return metadata;\n  },\n  onButtonPress(container: Container, buttonName: string, pressed?: boolean) {\n    if (buttonName === 'lock') {\n      container.locked = pressed;\n    }\n  },\n  onContextButtonPress(container: Container, contextMenuAction: string) {\n    if (contextMenuAction === 'delete') {\n      container.destroy();\n    }\n  },\n  onRename(container: Container, newName: string) {\n    container.name = newName;\n  },\n  onDeleted(container: Container) {\n    container.destroy();\n  },\n  onSwap(container: Container, newIndex: number) {\n    const parent = container.parent;\n    if (parent) {\n      parent.setChildIndex(container, newIndex);\n    }\n  },\n  onSelected(container: Container) {\n    console.log('Selected', container);\n  },\n  panelButtons: [\n    {\n      action: 'lock',\n      icon: 'lock',\n      tooltip: 'Lock Node',\n    },\n  ],\n};\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(4041);const a={},r=o.createContext(a);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);